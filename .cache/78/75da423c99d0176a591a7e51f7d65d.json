{"id":"../node_modules/node-webpmux/parser.js","dependencies":[{"name":"/Users/muhammadfarooqiqbal/flutterprojects/desiresol/nodejswork/marketingproject/marketing/package.json","includedInParent":true,"mtime":1709226561854},{"name":"/Users/muhammadfarooqiqbal/flutterprojects/desiresol/nodejswork/marketingproject/marketing/node_modules/node-webpmux/package.json","includedInParent":true,"mtime":1709226417615},{"name":"./io.js","loc":{"line":17,"column":19,"index":652},"parent":"/Users/muhammadfarooqiqbal/flutterprojects/desiresol/nodejswork/marketingproject/marketing/node_modules/node-webpmux/parser.js","resolved":"/Users/muhammadfarooqiqbal/flutterprojects/desiresol/nodejswork/marketingproject/marketing/node_modules/node-webpmux/io.js"},{"name":"buffer","parent":"/Users/muhammadfarooqiqbal/flutterprojects/desiresol/nodejswork/marketingproject/marketing/node_modules/node-webpmux/parser.js","resolved":"/Users/muhammadfarooqiqbal/flutterprojects/desiresol/nodejswork/marketingproject/marketing/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n/*\n    node-webpmux - NodeJS module for interacting with WebP images\n    Copyright (C) 2023  ApeironTsuka\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n*/\n\n\nconst IO = require('./io.js');\nconst nullByte = Buffer.alloc(1);\nnullByte[0] = 0;\nconst intfTypes = {\n  NONE: 0,\n  FILE: 1,\n  BUFFER: 2\n};\nconst constants = {\n  TYPE_LOSSY: 0,\n  TYPE_LOSSLESS: 1,\n  TYPE_EXTENDED: 2\n};\nfunction VP8Width(data) { return ((data[7] << 8) | data[6]) & 0b0011111111111111; }\nfunction VP8Height(data) { return ((data[9] << 8) | data[8]) & 0b0011111111111111; }\nfunction VP8LWidth(data) { return (((data[2] << 8) | data[1]) & 0b0011111111111111) + 1; }\nfunction VP8LHeight(data) { return ((((data[4] << 16) | (data[3] << 8) | data[2]) >> 6) & 0b0011111111111111) + 1; }\nfunction doesVP8LHaveAlpha(data) { return !!(data[4] & 0b00010000); }\nfunction createBasicChunk(name, data) {\n  let header = Buffer.alloc(8), size = data.length;\n  header.write(name, 0);\n  header.writeUInt32LE(size, 4);\n  if (size&1) { return { size: size + 9, chunks: [ header, data, nullByte ] }; }\n  else { return { size: size + 8, chunks: [ header, data ] }; }\n}\nclass WebPReader {\n  constructor() { this.type = intfTypes.NONE; }\n  readFile(path) { this.type = intfTypes.FILE; this.path = path; }\n  readBuffer(buf) { this.type = intfTypes.BUFFER; this.buf = buf; this.cursor = 0; }\n  async readBytes(n, mod) {\n    let { type } = this;\n    if (type == intfTypes.FILE) {\n      let b = Buffer.alloc(n), br;\n      br = (await IO.read(this.fp, b, 0, n, undefined)).bytesRead;\n      return mod ? b : br == n ? b : undefined;\n    } else if (type == intfTypes.BUFFER) { let b = this.buf.slice(this.cursor, this.cursor + n); this.cursor += n; return b; }\n    else { throw new Error('Reader not initialized'); }\n  }\n  async readFileHeader() {\n    let buf = await this.readBytes(12);\n    if (buf === undefined) { throw new Error('Reached end while reading header'); }\n    if (buf.toString('utf8', 0, 4) != 'RIFF') { throw new Error('Bad header (not RIFF)'); }\n    if (buf.toString('utf8', 8, 12) != 'WEBP') { throw new Error('Bad header (not WEBP)'); }\n    return { fileSize: buf.readUInt32LE(4) };\n  }\n  async readChunkHeader() {\n    let buf = await this.readBytes(8, true);\n    if (buf.length == 0) { return { fourCC: '\\x00\\x00\\x00\\x00', size: 0 }; }\n    else if (buf.length < 8) { throw new Error('Reached end while reading chunk header'); }\n    return { fourCC: buf.toString('utf8', 0, 4), size: buf.readUInt32LE(4) };\n  }\n  async readChunkContents(size) {\n    let buf = await this.readBytes(size);\n    if (size & 1) { await this.readBytes(1); }\n    return buf;\n  }\n  async readChunk_raw(n, size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error(`Reached end while reading ${n} chunk`); }\n    return { raw: buf };\n  }\n  async readChunk_VP8(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading VP8 chunk'); }\n    return { raw: buf, width: VP8Width(buf), height: VP8Height(buf) };\n  }\n  async readChunk_VP8L(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading VP8L chunk'); }\n    return { raw: buf, alpha: doesVP8LHaveAlpha(buf), width: VP8LWidth(buf), height: VP8LHeight(buf) };\n  }\n  async readChunk_VP8X(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading VP8X chunk'); }\n    return {\n      raw: buf,\n      hasICCP:  !!(buf[0] & 0b00100000),\n      hasAlpha: !!(buf[0] & 0b00010000),\n      hasEXIF:  !!(buf[0] & 0b00001000),\n      hasXMP:   !!(buf[0] & 0b00000100),\n      hasAnim:  !!(buf[0] & 0b00000010),\n      width: buf.readUIntLE(4, 3) + 1,\n      height: buf.readUIntLE(7, 3) + 1\n    };\n  }\n  async readChunk_ANIM(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading ANIM chunk'); }\n    return { raw: buf, bgColor: buf.slice(0, 4), loops: buf.readUInt16LE(4) };\n  }\n  async readChunk_ANMF(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading ANMF chunk'); }\n    let out = {\n      raw: buf,\n      x: buf.readUIntLE(0, 3),\n      y: buf.readUIntLE(3, 3),\n      width: buf.readUIntLE(6, 3) + 1,\n      height: buf.readUIntLE(9, 3) + 1,\n      delay: buf.readUIntLE(12, 3),\n      blend: !(buf[15] & 0b00000010),\n      dispose: !!(buf[15] & 0b00000001)\n    }, keepLooping = true, anmfReader = new WebPReader();\n    anmfReader.readBuffer(buf);\n    anmfReader.cursor = 16;\n    while (keepLooping) {\n      let header = await anmfReader.readChunkHeader();\n      switch (header.fourCC) {\n        case 'VP8 ':\n          if (!out.vp8) {\n            out.type = constants.TYPE_LOSSY;\n            out.vp8 = await anmfReader.readChunk_VP8(header.size);\n            if (out.alph) { out.vp8.alpha = true; }\n          }\n          break;\n        case 'VP8L':\n          if (!out.vp8l) {\n            out.type = constants.TYPE_LOSSLESS;\n            out.vp8l = await anmfReader.readChunk_VP8L(header.size);\n          }\n          break;\n        case 'ALPH':\n          if (!out.alph) {\n            out.alph = await anmfReader.readChunk_ALPH(header.size);\n            if (out.vp8) { out.vp8.alpha = true; }\n          }\n          break;\n        case '\\x00\\x00\\x00\\x00':\n        default:\n          keepLooping = false;\n          break;\n      }\n      if (anmfReader.cursor >= buf.length) { break; }\n    }\n    return out;\n  }\n  async readChunk_ALPH(size) { return this.readChunk_raw('ALPH', size); }\n  async readChunk_ICCP(size) { return this.readChunk_raw('ICCP', size); }\n  async readChunk_EXIF(size) { return this.readChunk_raw('EXIF', size); }\n  async readChunk_XMP(size) { return this.readChunk_raw('XMP ', size); }\n  async readChunk_skip(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while skipping chunk'); }\n  }\n  async read() {\n    if (this.type == intfTypes.FILE) { this.fp = await IO.open(this.path, 'r'); }\n    let keepLooping = true, first = true, { fileSize } = await this.readFileHeader(), out = {};\n    while (keepLooping) {\n      let { fourCC, size } = await this.readChunkHeader();\n      switch (fourCC) {\n        case 'VP8 ':\n          if (!out.vp8) {\n            out.vp8 = await this.readChunk_VP8(size);\n            if (out.alph) { out.vp8.alpha = true; }\n            if (first) { out.type = constants.TYPE_LOSSY; keepLooping = false; }\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'VP8L':\n          if (!out.vp8l) {\n            out.vp8l = await this.readChunk_VP8L(size);\n            if (first) { out.type = constants.TYPE_LOSSLESS; keepLooping = false; }\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'VP8X':\n          if (!out.extended) {\n            out.type = constants.TYPE_EXTENDED;\n            out.extended = await this.readChunk_VP8X(size);\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'ANIM':\n          if (!out.anim) {\n            let { raw, bgColor, loops } = await this.readChunk_ANIM(size);\n            out.anim = {\n              bgColor: [ bgColor[2], bgColor[1], bgColor[0], bgColor[3] ],\n              loops,\n              frames: [],\n              raw\n            };\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'ANMF': out.anim.frames.push(await this.readChunk_ANMF(size)); break;\n        case 'ALPH':\n          if (!out.alph) {\n            out.alph = await this.readChunk_ALPH(size);\n            if (out.vp8) { out.vp8.alpha = true; }\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'ICCP':\n          if (!out.iccp) { out.iccp = await this.readChunk_ICCP(size); }\n          else { await this.readChunk_skip(size); }\n          break;\n        case 'EXIF':\n          if (!out.exif) { out.exif = await this.readChunk_EXIF(size); }\n          else { await this.readChunk_skip(size); }\n          break;\n        case 'XMP ':\n          if (!out.xmp) { out.xmp = await this.readChunk_XMP(size); }\n          else { await this.readChunk_skip(size); }\n          break;\n        case '\\x00\\x00\\x00\\x00': keepLooping = false; break;\n        default: await this.readChunk_skip(size); break;\n      }\n      first = false;\n    }\n    if (this.type == intfTypes.FILE) { await IO.close(this.fp); }\n    return out;\n  }\n}\nclass WebPWriter {\n  constructor() { this.type = intfTypes.NONE; this.chunks = []; this.width = this.height = 0; }\n  reset() { this.chunks.length = 0; width = 0; height = 0; }\n  writeFile(path) { this.type = intfTypes.FILE; this.path = path; }\n  writeBuffer() { this.type = intfTypes.BUFFER; }\n  async commit() {\n    let { chunks } = this, size = 4, fp;\n    if (this.type == intfTypes.NONE) { throw new Error('Writer not initialized'); }\n    if (chunks.length == 0) { throw new Error('Nothing to write'); }\n    for (let i = 1, l = chunks.length; i < l; i++) { size += chunks[i].length; }\n    chunks[0].writeUInt32LE(size, 4);\n    if (this.type == intfTypes.FILE) {\n      fp = await IO.open(this.path, 'w');\n      for (let i = 0, l = chunks.length; i < l; i++) { await IO.write(fp, chunks[i], 0, undefined, undefined); }\n      await IO.close(fp);\n    } else { return Buffer.concat(chunks); }\n  }\n  writeBytes(...chunks) {\n    if (this.type == intfTypes.NONE) { throw new Error('Writer not initialized'); }\n    this.chunks.push(...chunks);\n  }\n  writeFileHeader() {\n    let buf = Buffer.alloc(12);\n    buf.write('RIFF', 0);\n    buf.write('WEBP', 8);\n    this.writeBytes(buf);\n  }\n  writeChunk_VP8(vp8) { this.writeBytes(...((createBasicChunk('VP8 ', vp8.raw)).chunks)); }\n  writeChunk_VP8L(vp8l) { this.writeBytes(...((createBasicChunk('VP8L', vp8l.raw)).chunks)); }\n  writeChunk_VP8X(vp8x) {\n    let buf = Buffer.alloc(18);\n    buf.write('VP8X', 0);\n    buf.writeUInt32LE(10, 4);\n    buf.writeUIntLE(vp8x.width - 1, 12, 3);\n    buf.writeUIntLE(vp8x.height - 1, 15, 3);\n    if (vp8x.hasICCP)  { buf[8] |= 0b00100000; }\n    if (vp8x.hasAlpha) { buf[8] |= 0b00010000; }\n    if (vp8x.hasEXIF)  { buf[8] |= 0b00001000; }\n    if (vp8x.hasXMP)   { buf[8] |= 0b00000100; }\n    if (vp8x.hasAnim)  { buf[8] |= 0b00000010; }\n    this.vp8x = buf;\n    this.writeBytes(buf);\n  }\n  updateChunk_VP8X_size(width, height) {\n    this.vp8x.writeUIntLE(width, 12, 3);\n    this.vp8x.writeUIntLE(height, 15, 3);\n  }\n  writeChunk_ANIM(anim) {\n    let buf = Buffer.alloc(14);\n    buf.write('ANIM', 0);\n    buf.writeUInt32LE(6, 4);\n    buf.writeUInt8(anim.bgColor[2], 8);\n    buf.writeUInt8(anim.bgColor[1], 9);\n    buf.writeUInt8(anim.bgColor[0], 10);\n    buf.writeUInt8(anim.bgColor[3], 11);\n    buf.writeUInt16LE(anim.loops, 12);\n    this.writeBytes(buf);\n  }\n  writeChunk_ANMF(anmf) {\n    let buf = Buffer.alloc(24), { img } = anmf, size = 16, alpha = false;\n    buf.write('ANMF', 0);\n    buf.writeUIntLE(anmf.x, 8, 3);\n    buf.writeUIntLE(anmf.y, 11, 3);\n    buf.writeUIntLE(anmf.delay, 20, 3);\n    if (!anmf.blend) { buf[23] |= 0b00000010; }\n    if (anmf.dispose) { buf[23] |= 0b00000001; }\n    switch (img.type) {\n      case constants.TYPE_LOSSY:\n        {\n          let b;\n          this.width = Math.max(this.width, img.vp8.width);\n          this.height = Math.max(this.height, img.vp8.height);\n          buf.writeUIntLE(img.vp8.width - 1, 14, 3);\n          buf.writeUIntLE(img.vp8.height - 1, 17, 3);\n          this.writeBytes(buf);\n          if (img.vp8.alpha) {\n            b = createBasicChunk('ALPH', img.alph.raw);\n            this.writeBytes(...b.chunks);\n            size += b.size;\n          }\n          b = createBasicChunk('VP8 ', img.vp8.raw);\n          this.writeBytes(...b.chunks);\n          size += b.size;\n        }\n        break;\n      case constants.TYPE_LOSSLESS:\n        {\n          let b = createBasicChunk('VP8L', img.vp8l.raw);\n          this.width = Math.max(this.width, img.vp8l.width);\n          this.height = Math.max(this.height, img.vp8l.height);\n          buf.writeUIntLE(img.vp8l.width - 1, 14, 3);\n          buf.writeUIntLE(img.vp8l.height - 1, 17, 3);\n          if (img.vp8l.alpha) { alpha = true; }\n          this.writeBytes(buf, ...b.chunks);\n          size += b.size;\n        }\n        break;\n      case constants.TYPE_EXTENDED:\n        if (img.extended.hasAnim) {\n          let fr = img.anim.frames;\n          if (img.extended.hasAlpha) { alpha = true; }\n          for (let i = 0, l = fr.length; i < l; i++) {\n            let b = Buffer.alloc(8), c = fr[i].raw;\n            this.width = Math.max(this.width, fr[i].width + anmf.x);\n            this.height = Math.max(this.height, fr[i].height + anmf.y);\n            b.write('ANMF', 0);\n            b.writeUInt32LE(c.length, 4);\n            c.writeUIntLE(anmf.x, 0, 3);\n            c.writeUIntLE(anmf.y, 3, 3);\n            c.writeUIntLE(anmf.delay, 12, 3);\n            if (!anmf.blend) { c[15] |= 0b00000010; } else { c[15] &= 0b11111101; }\n            if (anmf.dispose) { c[15] |= 0b00000001; } else { c[15] &= 0b11111110; }\n            this.writeBytes(b, c);\n            if (c.length & 1) { this.writeBytes(nullByte); }\n          }\n        } else {\n          let b;\n          this.width = Math.max(this.width, img.extended.width);\n          this.height = Math.max(this.height, img.extended.height);\n          if (img.vp8) {\n            buf.writeUIntLE(img.vp8.width - 1, 14, 3);\n            buf.writeUIntLE(img.vp8.height - 1, 17, 3);\n            this.writeBytes(buf);\n            if (img.alph) {\n              b = createBasicChunk('ALPH', img.alph.raw);\n              alpha = true;\n              this.writeBytes(...b.chunks);\n              size += b.size;\n            }\n            b = createBasicChunk('VP8 ', img.vp8.raw);\n            this.writeBytes(...b.chunks);\n            size += b.size;\n          } else if (img.vp8l) {\n            buf.writeUIntLE(img.vp8l.width - 1, 14, 3);\n            buf.writeUIntLE(img.vp8l.height - 1, 17, 3);\n            if (img.vp8l.alpha) { alpha = true; }\n            b = createBasicChunk('VP8L', img.vp8l.raw);\n            this.writeBytes(buf, ...b.chunks);\n            size += b.size;\n          }\n        }\n        break;\n      default: throw new Error('Unknown image type');\n    }\n    buf.writeUInt32LE(size, 4);\n    if (alpha) { this.vp8x[8] |= 0b00010000; }\n  }\n  writeChunk_ALPH(alph) { this.writeBytes(...((createBasicChunk('ALPH', alph.raw)).chunks)); }\n  writeChunk_ICCP(iccp) { this.writeBytes(...((createBasicChunk('ICCP', iccp.raw)).chunks)); }\n  writeChunk_EXIF(exif) { this.writeBytes(...((createBasicChunk('EXIF', exif.raw)).chunks)); }\n  writeChunk_XMP(xmp) { this.writeBytes(...((createBasicChunk('XMP ', xmp.raw)).chunks)); }\n}\nmodule.exports = { WebPReader, WebPWriter };\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/node-webpmux/parser.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/node-webpmux/parser.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}}],"sources":{"../node_modules/node-webpmux/parser.js":"/*\n    node-webpmux - NodeJS module for interacting with WebP images\n    Copyright (C) 2023  ApeironTsuka\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n*/\n\n\nconst IO = require('./io.js');\nconst nullByte = Buffer.alloc(1);\nnullByte[0] = 0;\nconst intfTypes = {\n  NONE: 0,\n  FILE: 1,\n  BUFFER: 2\n};\nconst constants = {\n  TYPE_LOSSY: 0,\n  TYPE_LOSSLESS: 1,\n  TYPE_EXTENDED: 2\n};\nfunction VP8Width(data) { return ((data[7] << 8) | data[6]) & 0b0011111111111111; }\nfunction VP8Height(data) { return ((data[9] << 8) | data[8]) & 0b0011111111111111; }\nfunction VP8LWidth(data) { return (((data[2] << 8) | data[1]) & 0b0011111111111111) + 1; }\nfunction VP8LHeight(data) { return ((((data[4] << 16) | (data[3] << 8) | data[2]) >> 6) & 0b0011111111111111) + 1; }\nfunction doesVP8LHaveAlpha(data) { return !!(data[4] & 0b00010000); }\nfunction createBasicChunk(name, data) {\n  let header = Buffer.alloc(8), size = data.length;\n  header.write(name, 0);\n  header.writeUInt32LE(size, 4);\n  if (size&1) { return { size: size + 9, chunks: [ header, data, nullByte ] }; }\n  else { return { size: size + 8, chunks: [ header, data ] }; }\n}\nclass WebPReader {\n  constructor() { this.type = intfTypes.NONE; }\n  readFile(path) { this.type = intfTypes.FILE; this.path = path; }\n  readBuffer(buf) { this.type = intfTypes.BUFFER; this.buf = buf; this.cursor = 0; }\n  async readBytes(n, mod) {\n    let { type } = this;\n    if (type == intfTypes.FILE) {\n      let b = Buffer.alloc(n), br;\n      br = (await IO.read(this.fp, b, 0, n, undefined)).bytesRead;\n      return mod ? b : br == n ? b : undefined;\n    } else if (type == intfTypes.BUFFER) { let b = this.buf.slice(this.cursor, this.cursor + n); this.cursor += n; return b; }\n    else { throw new Error('Reader not initialized'); }\n  }\n  async readFileHeader() {\n    let buf = await this.readBytes(12);\n    if (buf === undefined) { throw new Error('Reached end while reading header'); }\n    if (buf.toString('utf8', 0, 4) != 'RIFF') { throw new Error('Bad header (not RIFF)'); }\n    if (buf.toString('utf8', 8, 12) != 'WEBP') { throw new Error('Bad header (not WEBP)'); }\n    return { fileSize: buf.readUInt32LE(4) };\n  }\n  async readChunkHeader() {\n    let buf = await this.readBytes(8, true);\n    if (buf.length == 0) { return { fourCC: '\\x00\\x00\\x00\\x00', size: 0 }; }\n    else if (buf.length < 8) { throw new Error('Reached end while reading chunk header'); }\n    return { fourCC: buf.toString('utf8', 0, 4), size: buf.readUInt32LE(4) };\n  }\n  async readChunkContents(size) {\n    let buf = await this.readBytes(size);\n    if (size & 1) { await this.readBytes(1); }\n    return buf;\n  }\n  async readChunk_raw(n, size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error(`Reached end while reading ${n} chunk`); }\n    return { raw: buf };\n  }\n  async readChunk_VP8(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading VP8 chunk'); }\n    return { raw: buf, width: VP8Width(buf), height: VP8Height(buf) };\n  }\n  async readChunk_VP8L(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading VP8L chunk'); }\n    return { raw: buf, alpha: doesVP8LHaveAlpha(buf), width: VP8LWidth(buf), height: VP8LHeight(buf) };\n  }\n  async readChunk_VP8X(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading VP8X chunk'); }\n    return {\n      raw: buf,\n      hasICCP:  !!(buf[0] & 0b00100000),\n      hasAlpha: !!(buf[0] & 0b00010000),\n      hasEXIF:  !!(buf[0] & 0b00001000),\n      hasXMP:   !!(buf[0] & 0b00000100),\n      hasAnim:  !!(buf[0] & 0b00000010),\n      width: buf.readUIntLE(4, 3) + 1,\n      height: buf.readUIntLE(7, 3) + 1\n    };\n  }\n  async readChunk_ANIM(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading ANIM chunk'); }\n    return { raw: buf, bgColor: buf.slice(0, 4), loops: buf.readUInt16LE(4) };\n  }\n  async readChunk_ANMF(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while reading ANMF chunk'); }\n    let out = {\n      raw: buf,\n      x: buf.readUIntLE(0, 3),\n      y: buf.readUIntLE(3, 3),\n      width: buf.readUIntLE(6, 3) + 1,\n      height: buf.readUIntLE(9, 3) + 1,\n      delay: buf.readUIntLE(12, 3),\n      blend: !(buf[15] & 0b00000010),\n      dispose: !!(buf[15] & 0b00000001)\n    }, keepLooping = true, anmfReader = new WebPReader();\n    anmfReader.readBuffer(buf);\n    anmfReader.cursor = 16;\n    while (keepLooping) {\n      let header = await anmfReader.readChunkHeader();\n      switch (header.fourCC) {\n        case 'VP8 ':\n          if (!out.vp8) {\n            out.type = constants.TYPE_LOSSY;\n            out.vp8 = await anmfReader.readChunk_VP8(header.size);\n            if (out.alph) { out.vp8.alpha = true; }\n          }\n          break;\n        case 'VP8L':\n          if (!out.vp8l) {\n            out.type = constants.TYPE_LOSSLESS;\n            out.vp8l = await anmfReader.readChunk_VP8L(header.size);\n          }\n          break;\n        case 'ALPH':\n          if (!out.alph) {\n            out.alph = await anmfReader.readChunk_ALPH(header.size);\n            if (out.vp8) { out.vp8.alpha = true; }\n          }\n          break;\n        case '\\x00\\x00\\x00\\x00':\n        default:\n          keepLooping = false;\n          break;\n      }\n      if (anmfReader.cursor >= buf.length) { break; }\n    }\n    return out;\n  }\n  async readChunk_ALPH(size) { return this.readChunk_raw('ALPH', size); }\n  async readChunk_ICCP(size) { return this.readChunk_raw('ICCP', size); }\n  async readChunk_EXIF(size) { return this.readChunk_raw('EXIF', size); }\n  async readChunk_XMP(size) { return this.readChunk_raw('XMP ', size); }\n  async readChunk_skip(size) {\n    let buf = await this.readChunkContents(size);\n    if (buf === undefined) { throw new Error('Reached end while skipping chunk'); }\n  }\n  async read() {\n    if (this.type == intfTypes.FILE) { this.fp = await IO.open(this.path, 'r'); }\n    let keepLooping = true, first = true, { fileSize } = await this.readFileHeader(), out = {};\n    while (keepLooping) {\n      let { fourCC, size } = await this.readChunkHeader();\n      switch (fourCC) {\n        case 'VP8 ':\n          if (!out.vp8) {\n            out.vp8 = await this.readChunk_VP8(size);\n            if (out.alph) { out.vp8.alpha = true; }\n            if (first) { out.type = constants.TYPE_LOSSY; keepLooping = false; }\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'VP8L':\n          if (!out.vp8l) {\n            out.vp8l = await this.readChunk_VP8L(size);\n            if (first) { out.type = constants.TYPE_LOSSLESS; keepLooping = false; }\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'VP8X':\n          if (!out.extended) {\n            out.type = constants.TYPE_EXTENDED;\n            out.extended = await this.readChunk_VP8X(size);\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'ANIM':\n          if (!out.anim) {\n            let { raw, bgColor, loops } = await this.readChunk_ANIM(size);\n            out.anim = {\n              bgColor: [ bgColor[2], bgColor[1], bgColor[0], bgColor[3] ],\n              loops,\n              frames: [],\n              raw\n            };\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'ANMF': out.anim.frames.push(await this.readChunk_ANMF(size)); break;\n        case 'ALPH':\n          if (!out.alph) {\n            out.alph = await this.readChunk_ALPH(size);\n            if (out.vp8) { out.vp8.alpha = true; }\n          } else { await this.readChunk_skip(size); }\n          break;\n        case 'ICCP':\n          if (!out.iccp) { out.iccp = await this.readChunk_ICCP(size); }\n          else { await this.readChunk_skip(size); }\n          break;\n        case 'EXIF':\n          if (!out.exif) { out.exif = await this.readChunk_EXIF(size); }\n          else { await this.readChunk_skip(size); }\n          break;\n        case 'XMP ':\n          if (!out.xmp) { out.xmp = await this.readChunk_XMP(size); }\n          else { await this.readChunk_skip(size); }\n          break;\n        case '\\x00\\x00\\x00\\x00': keepLooping = false; break;\n        default: await this.readChunk_skip(size); break;\n      }\n      first = false;\n    }\n    if (this.type == intfTypes.FILE) { await IO.close(this.fp); }\n    return out;\n  }\n}\nclass WebPWriter {\n  constructor() { this.type = intfTypes.NONE; this.chunks = []; this.width = this.height = 0; }\n  reset() { this.chunks.length = 0; width = 0; height = 0; }\n  writeFile(path) { this.type = intfTypes.FILE; this.path = path; }\n  writeBuffer() { this.type = intfTypes.BUFFER; }\n  async commit() {\n    let { chunks } = this, size = 4, fp;\n    if (this.type == intfTypes.NONE) { throw new Error('Writer not initialized'); }\n    if (chunks.length == 0) { throw new Error('Nothing to write'); }\n    for (let i = 1, l = chunks.length; i < l; i++) { size += chunks[i].length; }\n    chunks[0].writeUInt32LE(size, 4);\n    if (this.type == intfTypes.FILE) {\n      fp = await IO.open(this.path, 'w');\n      for (let i = 0, l = chunks.length; i < l; i++) { await IO.write(fp, chunks[i], 0, undefined, undefined); }\n      await IO.close(fp);\n    } else { return Buffer.concat(chunks); }\n  }\n  writeBytes(...chunks) {\n    if (this.type == intfTypes.NONE) { throw new Error('Writer not initialized'); }\n    this.chunks.push(...chunks);\n  }\n  writeFileHeader() {\n    let buf = Buffer.alloc(12);\n    buf.write('RIFF', 0);\n    buf.write('WEBP', 8);\n    this.writeBytes(buf);\n  }\n  writeChunk_VP8(vp8) { this.writeBytes(...((createBasicChunk('VP8 ', vp8.raw)).chunks)); }\n  writeChunk_VP8L(vp8l) { this.writeBytes(...((createBasicChunk('VP8L', vp8l.raw)).chunks)); }\n  writeChunk_VP8X(vp8x) {\n    let buf = Buffer.alloc(18);\n    buf.write('VP8X', 0);\n    buf.writeUInt32LE(10, 4);\n    buf.writeUIntLE(vp8x.width - 1, 12, 3);\n    buf.writeUIntLE(vp8x.height - 1, 15, 3);\n    if (vp8x.hasICCP)  { buf[8] |= 0b00100000; }\n    if (vp8x.hasAlpha) { buf[8] |= 0b00010000; }\n    if (vp8x.hasEXIF)  { buf[8] |= 0b00001000; }\n    if (vp8x.hasXMP)   { buf[8] |= 0b00000100; }\n    if (vp8x.hasAnim)  { buf[8] |= 0b00000010; }\n    this.vp8x = buf;\n    this.writeBytes(buf);\n  }\n  updateChunk_VP8X_size(width, height) {\n    this.vp8x.writeUIntLE(width, 12, 3);\n    this.vp8x.writeUIntLE(height, 15, 3);\n  }\n  writeChunk_ANIM(anim) {\n    let buf = Buffer.alloc(14);\n    buf.write('ANIM', 0);\n    buf.writeUInt32LE(6, 4);\n    buf.writeUInt8(anim.bgColor[2], 8);\n    buf.writeUInt8(anim.bgColor[1], 9);\n    buf.writeUInt8(anim.bgColor[0], 10);\n    buf.writeUInt8(anim.bgColor[3], 11);\n    buf.writeUInt16LE(anim.loops, 12);\n    this.writeBytes(buf);\n  }\n  writeChunk_ANMF(anmf) {\n    let buf = Buffer.alloc(24), { img } = anmf, size = 16, alpha = false;\n    buf.write('ANMF', 0);\n    buf.writeUIntLE(anmf.x, 8, 3);\n    buf.writeUIntLE(anmf.y, 11, 3);\n    buf.writeUIntLE(anmf.delay, 20, 3);\n    if (!anmf.blend) { buf[23] |= 0b00000010; }\n    if (anmf.dispose) { buf[23] |= 0b00000001; }\n    switch (img.type) {\n      case constants.TYPE_LOSSY:\n        {\n          let b;\n          this.width = Math.max(this.width, img.vp8.width);\n          this.height = Math.max(this.height, img.vp8.height);\n          buf.writeUIntLE(img.vp8.width - 1, 14, 3);\n          buf.writeUIntLE(img.vp8.height - 1, 17, 3);\n          this.writeBytes(buf);\n          if (img.vp8.alpha) {\n            b = createBasicChunk('ALPH', img.alph.raw);\n            this.writeBytes(...b.chunks);\n            size += b.size;\n          }\n          b = createBasicChunk('VP8 ', img.vp8.raw);\n          this.writeBytes(...b.chunks);\n          size += b.size;\n        }\n        break;\n      case constants.TYPE_LOSSLESS:\n        {\n          let b = createBasicChunk('VP8L', img.vp8l.raw);\n          this.width = Math.max(this.width, img.vp8l.width);\n          this.height = Math.max(this.height, img.vp8l.height);\n          buf.writeUIntLE(img.vp8l.width - 1, 14, 3);\n          buf.writeUIntLE(img.vp8l.height - 1, 17, 3);\n          if (img.vp8l.alpha) { alpha = true; }\n          this.writeBytes(buf, ...b.chunks);\n          size += b.size;\n        }\n        break;\n      case constants.TYPE_EXTENDED:\n        if (img.extended.hasAnim) {\n          let fr = img.anim.frames;\n          if (img.extended.hasAlpha) { alpha = true; }\n          for (let i = 0, l = fr.length; i < l; i++) {\n            let b = Buffer.alloc(8), c = fr[i].raw;\n            this.width = Math.max(this.width, fr[i].width + anmf.x);\n            this.height = Math.max(this.height, fr[i].height + anmf.y);\n            b.write('ANMF', 0);\n            b.writeUInt32LE(c.length, 4);\n            c.writeUIntLE(anmf.x, 0, 3);\n            c.writeUIntLE(anmf.y, 3, 3);\n            c.writeUIntLE(anmf.delay, 12, 3);\n            if (!anmf.blend) { c[15] |= 0b00000010; } else { c[15] &= 0b11111101; }\n            if (anmf.dispose) { c[15] |= 0b00000001; } else { c[15] &= 0b11111110; }\n            this.writeBytes(b, c);\n            if (c.length & 1) { this.writeBytes(nullByte); }\n          }\n        } else {\n          let b;\n          this.width = Math.max(this.width, img.extended.width);\n          this.height = Math.max(this.height, img.extended.height);\n          if (img.vp8) {\n            buf.writeUIntLE(img.vp8.width - 1, 14, 3);\n            buf.writeUIntLE(img.vp8.height - 1, 17, 3);\n            this.writeBytes(buf);\n            if (img.alph) {\n              b = createBasicChunk('ALPH', img.alph.raw);\n              alpha = true;\n              this.writeBytes(...b.chunks);\n              size += b.size;\n            }\n            b = createBasicChunk('VP8 ', img.vp8.raw);\n            this.writeBytes(...b.chunks);\n            size += b.size;\n          } else if (img.vp8l) {\n            buf.writeUIntLE(img.vp8l.width - 1, 14, 3);\n            buf.writeUIntLE(img.vp8l.height - 1, 17, 3);\n            if (img.vp8l.alpha) { alpha = true; }\n            b = createBasicChunk('VP8L', img.vp8l.raw);\n            this.writeBytes(buf, ...b.chunks);\n            size += b.size;\n          }\n        }\n        break;\n      default: throw new Error('Unknown image type');\n    }\n    buf.writeUInt32LE(size, 4);\n    if (alpha) { this.vp8x[8] |= 0b00010000; }\n  }\n  writeChunk_ALPH(alph) { this.writeBytes(...((createBasicChunk('ALPH', alph.raw)).chunks)); }\n  writeChunk_ICCP(iccp) { this.writeBytes(...((createBasicChunk('ICCP', iccp.raw)).chunks)); }\n  writeChunk_EXIF(exif) { this.writeBytes(...((createBasicChunk('EXIF', exif.raw)).chunks)); }\n  writeChunk_XMP(xmp) { this.writeBytes(...((createBasicChunk('XMP ', xmp.raw)).chunks)); }\n}\nmodule.exports = { WebPReader, WebPWriter };\n"},"lineCount":379}},"error":null,"hash":"035e16c14184947a4b9b732384615800","cacheData":{"env":{}}}